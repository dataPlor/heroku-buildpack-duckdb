#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

header() {
  echo "" || true
  echo "-----> $*" || true
}

export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

output() {
  while IFS= read -r LINE; do
    # do not indent headers that are being piped through the output
    if [[ "$LINE" =~ ^-----\>.* ]]; then
      echo "$LINE" || true
    else
      echo "       $LINE" || true
    fi
  done
}

header "Installing DuckDB"

BUILD_DIR=${1:-}
ENV_DIR=${3:-}
VENDOR_DIR="vendor"
DUCKDB_ARCHIVE_NAME="duckdb.zip"

export_env_dir $ENV_DIR

cd $BUILD_DIR
mkdir -p $VENDOR_DIR
cd $VENDOR_DIR
mkdir -p duckdb
cd duckdb

DUCKDB_VERSION="1.0.0"
DUCKDB_DOWNLOAD_URL="https://github.com/duckdb/duckdb/releases/download/v$DUCKDB_VERSION/duckdb_cli-linux-amd64.zip"

echo "Downloading $DUCKDB_DOWNLOAD_URL" | output

code=$(curl "$DUCKDB_DOWNLOAD_URL" -L --silent --fail --retry 5 --retry-max-time 15 -o ./$DUCKDB_ARCHIVE_NAME --write-out "%{http_code}")

if [ "$code" != "200" ]; then
  echo "Unable to download DuckDB: $code" | output && exit 1
fi

echo "Unpacking the archive" | output

unzip "./$DUCKDB_ARCHIVE_NAME" -d ./

if [ "$?" != "0" ]; then
  echo "Failed to unpack" | output && exit 1
fi

rm $DUCKDB_ARCHIVE_NAME

PROFILE_PATH="$BUILD_DIR/.profile.d/duckdb.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$PATH:${HOME}/vendor/duckdb"' >> $PROFILE_PATH

echo "Installation successful" | output
