#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

header() {
  echo "" || true
  echo "-----> $*" || true
}

export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

output() {
  while IFS= read -r LINE; do
    if [[ "$LINE" =~ ^-----\>.* ]]; then
      echo "$LINE" || true
    else
      echo "       $LINE" || true
    fi
  done
}

header "Installing DuckDB"

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
DUCKDB_VERSION="1.0.0"


# Set GEM_HOME and BUNDLE_PATH to the same directory
export BUNDLE_PATH=$GEM_HOME
export DUCKDB_DIR=/app/duckdb
export DUCKDB_LIB=$DUCKDB_DIR
export DUCKDB_INCLUDE=$DUCKDB_DIR
export_env_dir $ENV_DIR

mkdir -p $DUCKDB_LIB

# Download DuckDB C++ package
DUCKDB_PACKAGE_URL="https://github.com/duckdb/duckdb/releases/download/v$DUCKDB_VERSION/libduckdb-linux-amd64.zip"
echo "Downloading $DUCKDB_PACKAGE_URL" | output
curl -L $DUCKDB_PACKAGE_URL -o libduckdb.zip

# Extract DuckDB files
unzip libduckdb.zip -d libduckdb
cp libduckdb/duckdb.* $DUCKDB_INCLUDE/
cp libduckdb/libduckdb.so $DUCKDB_LIB/

# Create .profile.d directory if it doesn't exist
mkdir -p $BUILD_DIR/.profile.d

# Export DUCKDB_LIB and DUCKDB_INCLUDE for future steps
cat <<EOF > $BUILD_DIR/.profile.d/duckdb.sh
export DUCKDB_LIB=$DUCKDB_LIB
export DUCKDB_INCLUDE=$DUCKDB_INCLUDE
EOF


echo "Installation successful" | output
